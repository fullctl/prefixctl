# Generated by Django 3.2.9 on 2022-04-04 13:10

import django.db.models.deletion
import django.db.models.manager
import django_handleref.models
import netfields.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Data",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "created",
                    django_handleref.models.CreatedDateTimeField(
                        auto_now_add=True, verbose_name="Created"
                    ),
                ),
                (
                    "updated",
                    django_handleref.models.UpdatedDateTimeField(
                        auto_now=True, verbose_name="Updated"
                    ),
                ),
                ("version", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ok", "Ok"),
                            ("pending", "Pending"),
                            ("deactivated", "Deactivated"),
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                        ],
                        default="ok",
                        max_length=12,
                    ),
                ),
                ("data", models.JSONField()),
                (
                    "prefix",
                    netfields.fields.CidrAddressField(max_length=43, unique=True),
                ),
            ],
            options={
                "verbose_name": "Meta data",
                "verbose_name_plural": "Meta data",
                "db_table": "prefix_meta_data",
            },
            managers=[
                ("handleref", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Request",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "created",
                    django_handleref.models.CreatedDateTimeField(
                        auto_now_add=True, verbose_name="Created"
                    ),
                ),
                (
                    "updated",
                    django_handleref.models.UpdatedDateTimeField(
                        auto_now=True, verbose_name="Updated"
                    ),
                ),
                ("version", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ok", "Ok"),
                            ("pending", "Pending"),
                            ("deactivated", "Deactivated"),
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                        ],
                        default="ok",
                        max_length=12,
                    ),
                ),
                ("source", models.CharField(max_length=255)),
                ("url", models.URLField()),
                ("http_status", models.PositiveIntegerField()),
                ("payload", models.JSONField(null=True)),
                ("count", models.PositiveIntegerField(default=1)),
                (
                    "processing_error",
                    models.CharField(
                        blank=True,
                        help_text="will hold error information if the request came back as a success but reading its data resulted in an error on our end.",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("prefix", netfields.fields.CidrAddressField(max_length=43)),
            ],
            options={
                "verbose_name": "Request cache",
                "verbose_name_plural": "Request cache",
                "db_table": "prefix_meta_request",
                "unique_together": {("prefix", "source")},
            },
            managers=[
                ("handleref", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Response",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "created",
                    django_handleref.models.CreatedDateTimeField(
                        auto_now_add=True, verbose_name="Created"
                    ),
                ),
                (
                    "updated",
                    django_handleref.models.UpdatedDateTimeField(
                        auto_now=True, verbose_name="Updated"
                    ),
                ),
                ("version", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ok", "Ok"),
                            ("pending", "Pending"),
                            ("deactivated", "Deactivated"),
                            ("failed", "Failed"),
                            ("expired", "Expired"),
                        ],
                        default="ok",
                        max_length=12,
                    ),
                ),
                ("source", models.CharField(max_length=255)),
                ("data", models.JSONField(null=True)),
                (
                    "request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="response",
                        to="prefix_meta.request",
                    ),
                ),
            ],
            options={
                "verbose_name": "Response cache",
                "verbose_name_plural": "Response cache",
                "db_table": "prefix_meta_response",
            },
            managers=[
                ("handleref", django.db.models.manager.Manager()),
            ],
        ),
    ]
